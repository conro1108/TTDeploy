{"version":3,"sources":["LoginButton.js","LoggedInDisplay.js","Header.js","OurModal.js","Body.js","Footer.js","Page.js","App.js","serviceWorker.js","index.js"],"names":["cookies","Cookies","LoginButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loginUrl","resourceOwnerKeyCookie","resourceOwnerSecretCookie","_this2","axios","get","then","response","setState","data","url","cookie_1","cookie_2","keyCookie","split","secretCookie","remove","set","path","expires","Date","domain","react_default","a","createElement","className","href","Component","LoggedInDisplay","loginStatus","username","Status","logo1","src","alt","style","Header","width","Route","component","ReactModal","setAppElement","OurModal","showModal","handleOpenModal","bind","assertThisInitialized","handleCloseModal","type","onClick","lib_default","isOpen","class","id","data-dismiss","aria-label","aria-hidden","value","React","autosplitting","sendtweet","splittingoptions","src_OurModal","Tweets","_ref","boxes","map","box","key","index","name","charactersused","Body","props","handleaddbox","handleremovebox","push","boxnum","newBoxes","length","console","log","splice","button","Body_Tweets","contactbutton","action","helpbutton","logo2","Footer","Page","src_Header","src_Body","src_Footer","App","BrowserRouter","src_Page","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9185f7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nclass LoginButton extends Component {\n    constructor () {\n        super()\n        this.state = {\n            loginUrl: '',\n            resourceOwnerKeyCookie: '',\n            resourceOwnerSecretCookie: ''\n        }\n\n              \n    }\n\n    componentDidMount() {\n        axios.get('https://api.threadedtweeter.com/v2/login?mode=webapp').then(\n            response => {\n                this.setState({\n                    loginUrl : response.data.url,\n                    resourceOwnerKeyCookie : response.data.cookie_1,\n                    resourceOwnerSecretCookie : response.data.cookie_2\n                })\n\n                let keyCookie = this.state.resourceOwnerKeyCookie.split(\";\")[0].split(\"=\")[1];\n                let secretCookie = this.state.resourceOwnerSecretCookie.split(\";\")[0].split(\"=\")[1];\n\n                cookies.remove('resource_owner_key');\n                cookies.remove('resource_owner_secret');\n\n                cookies.set('resource_owner_key', keyCookie, {path : '/', expires : new Date('2020-1-1'), domain : '.threadedtweeter.com'});\n                cookies.set('resource_owner_secret', secretCookie, {path : '/', expires : new Date('2020-1-1'), domain : '.threadedtweeter.com'});\n            } \n        ); \n    }\n\n    render() {\n        return (\n            <div className=\"login_button\">\n                <a className=\"button\" href={this.state.loginUrl}>Login with Twitter</a>\n            </div>\n        )\n    }\n}\n\nexport default LoginButton;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass LoggedInDisplay extends Component {\n    constructor () {\n        super()\n        this.state = {\n            loginStatus: false,\n            username: \"\"\n        }        \n    }\n\n    componentDidMount() {\n        axios.get(\"https://api.threadedtweeter.com/v2/login/status\").then(\n            response => {\n                if (response.data.loginStatus){\n                    this.setState({\n                        loginStatus: response.data.Status,\n                        username: response.data.username\n                    })\n                } else {\n                    this.setState({\n                        loginStatus: response.data.Status\n                    })\n                }\n            }\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"loged_in_display\">\n                {this.state.loginStatus ? \"Not logged in\" : \"Logged in as: \" + this.state.username}\n            </div>\n        )\n    }\n}\n\nexport default LoggedInDisplay;","import React, { Component } from 'react';\nimport LoginButton from './LoginButton';\nimport LoggedInDisplay from './LoggedInDisplay';\nimport { Route, Switch } from 'react-router-dom';\n\nconst logo1 ={\n    src:'src/logo.jpg',\n    alt: 'logo',\n    style:'width:70px;'   \n};\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className = \"main-header\">\n            <div className = \"sub-header1\">\n                <div className = \"h-1\">\n                    <div>\n                        Tweet \n                    </div>\n                    <div>\n                        Together\n                    </div>\n                </div>\n                <div className = \"h-2\">\n            <img \n            src={logo1.src}\n            alt={logo1.alt}\n            style={logo1.width} />            \n            </div>\n                <div className = \"h-3\">Threaded Tweeter</div>\n            </div>\n            <div className = \"sub-header2\">\n                <div className = \"h-4\">    \n                    \n                        <Route path=\"/\" component={LoggedInDisplay} />\n                        <Route path=\"/\" component={LoginButton} />\n                    \n                </div>\n            </div>       \n        </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport ReactModal, {Modal} from 'react-modal';\n\nReactModal.setAppElement('#main');\n\nclass OurModal extends React.Component {\n  constructor () {\n    super();\n    this.state = {\n      showModal: false\n    };\n    \n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n  }\n  \n  handleOpenModal () {\n    this.setState({ showModal: true });\n  }\n  \n  handleCloseModal () {\n    this.setState({ showModal: false });\n  }\n  \n  render () {\n    return (\n      <div>\n        <button type=\"button\" className=\"notbutton\" onClick={this.handleOpenModal}>Splitting options</button>\n        <ReactModal \n           isOpen={this.state.showModal} class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <div class=\"modal-title\" id=\"exampleModalLabel\">\n                            Tweet splitting allows us to formate your thread for you.\n                        </div>\n                        <button  onClick={this.handleCloseModal} type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n\n                    </div>\n                    <div class=\"modal-body\">\n                        ...\n                    </div>\n\n                    <div class=\"modal-footer\">\n\n                        <form>\n                            <div class=\"b-7\" data-dismiss=\"modal\"><input type=\"submit2\" value=\"cancel\"/></div>\n\n                            <div class=\"b-6\">\n                                <input type=\"submit2\" value=\"submit\"/>\n                            </div>\n                        </form> \n\n                    </div>\n        </ReactModal>\n      </div>\n    );\n  }\n}\n\n\n\nexport default OurModal;","import React, { Component } from 'react';\nimport OurModal from './OurModal';\n\nconst autosplitting = <div className=\"b-1\">\n                        Auto splitting: off\n                    </div>;\n\nconst sendtweet = <div className=\"b-3\">\n                        <input type=\"submit2\" value=\"submit\"/></div>;\n\nconst splittingoptions = <div className=\"b-2\">\n                        <OurModal />\n                    </div>;\n\nconst Tweets = ({boxes}) => (\n<div>\n    {\n        boxes.map( box =>(\n        <div key = {box.index}>\n    <textarea type=\"text2\" id=\"tweet\" name=\"tweet\">\n                    </textarea>\n                    <div className = \"sub-body2\">\n                        <div className=\"b-4\">\n                            Add picture\n                        </div>\n            {charactersused} \n                    </div>\n    </div>\n        ))\n    }\n    </div>\n)\n\nconst charactersused = <div className=\"b-5\">\n                            0/280 characters used\n                        </div>;\n\nclass Body extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleaddbox = this.handleaddbox.bind(this);\n        this.handleremovebox = this.handleremovebox.bind(this);\n        const boxnum = {index: 1};\n        const boxes = [];\n        boxes.push({boxnum});\n        this.state = {boxes};\n        \n        \n    }\n    handleaddbox(){\n        const newBoxes = this.state.boxes;\n        newBoxes.push({index: newBoxes.length});\n        this.setState({boxes : newBoxes});\n        console.log(\"handleaddbox \" + this.state.boxes.length);\n    }\n    handleremovebox(){\n        const newBoxes = this.state.boxes;\n        newBoxes.splice((newBoxes.length-1),1);\n        this.setState({boxes : newBoxes});\n        console.log(\"handleremovebox \" + this.state.boxes.length);\n    }\n    render() {\n        const boxes = this.state.boxes;\n        const boxnum = boxes.length;\n        let button;\n        if(boxnum === 1){\n            button = <div className = \"centeronebutton\">\n            <button className = \"circlebutton\" onClick = {this.handleaddbox}>\n                            +\n                        </button>\n            </div>\n        } else{\n            button = <div className = \"centeronebutton\">\n             <button className = \"circlebutton\" onClick = {this.handleremovebox}>\n                            -\n                        </button>\n            <button className = \"circlebutton\" onClick = {this.handleaddbox}>\n                            +\n                        </button>\n            </div>\n        }\n        return (\n            <div className = \"main-body\">\n            <div className = \"sub-body\">\n                <div className = \"sub-body1\">\n                    {autosplitting}\n                    {splittingoptions}\n                </div>\n<Tweets boxes={boxes}/>             \n            {button}\n                    {sendtweet}\n\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default Body;","import React, { Component } from 'react';\n\nconst contactbutton = <form action=\"http://google.com\">\n    <input type=\"link\" value=\"contact us\"/>\n        </form>;\n\nconst helpbutton = <form action=\"http://google.com\">\n    <input type=\"link\" value=\"help\"/> \n        </form>;\n\nconst logo2 ={\n    src:'src/logo2.jpg',\n    alt: 'logo2',\n    style:'width:55px;'   \n};\n\nclass Footer extends Component {\n    render() {\n        return (\n\n            <div className = \"main-footer\">\n            <div className = \"h-1\">\n            {helpbutton}\n            </div>\n            <div className = \"h-2\">\n            <img \n            src={logo2.src}\n            alt={logo2.alt}\n            style={logo2.width} />\n            </div>\n            <div className = \"h-5\">  \n            {contactbutton}\n            </div>\n            </div> \n        );\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\n\nclass Page extends Component {\n    render() {\n        return (\n            <div className = \"bodystyle\">\n            <Header />\n            <Body />\n            <Footer />\n            </div>\n        );\n    }\n}\n\nexport default Page;","import React, { Component } from 'react';\nimport Page from './Page'\nimport './App.css';\nimport { BrowserRouter} from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Page />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}