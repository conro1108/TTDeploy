{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\tlalka\\\\Documents\\\\TTDeploy\\\\tt-deploy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tlalka\\\\Documents\\\\TTDeploy\\\\tt-deploy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tlalka\\\\Documents\\\\TTDeploy\\\\tt-deploy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tlalka\\\\Documents\\\\TTDeploy\\\\tt-deploy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tlalka\\\\Documents\\\\TTDeploy\\\\tt-deploy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\tlalka\\\\Documents\\\\TTDeploy\\\\tt-deploy\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\tlalka\\\\Documents\\\\TTDeploy\\\\tt-deploy\\\\src\\\\Body.js\";\nimport React, { Component } from 'react';\nimport Modal from './Modal';\nvar autosplitting = React.createElement(\"div\", {\n  className: \"b-1\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4\n  },\n  __self: this\n}, \"Auto splitting: off\");\nvar sendtweet = React.createElement(\"div\", {\n  className: \"b-3\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  type: \"submit2\",\n  value: \"submit\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}));\nvar splittingoptions = React.createElement(\"div\", {\n  className: \"b-2\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  type: \"button\",\n  className: \"notbutton\",\n  \"data-toggle\": \"modal\",\n  \"data-target\": \"#exampleModal\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, \"Splitting options\"));\n\nvar Tweets = function Tweets(_ref) {\n  var boxes = _ref.boxes;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, boxes.map(function (box) {\n    return React.createElement(\"div\", {\n      key: box.index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      type: \"text2\",\n      id: \"tweet\",\n      name: \"tweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"sub-body2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"b-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Add picture\"), charactersused));\n  }));\n};\n\nvar charactersused = React.createElement(\"div\", {\n  className: \"b-5\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}, \"0/280 characters used\");\n\nvar Body =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Body, _React$Component);\n\n  function Body(props) {\n    var _this;\n\n    _classCallCheck(this, Body);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Body).call(this, props));\n    _this.handleaddbox = _this.handleaddbox.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleremovebox = _this.handleremovebox.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    var boxnum = {\n      index: 1\n    };\n    var boxes = [];\n    boxes.push({\n      boxnum: boxnum\n    });\n    _this.state = {\n      boxes: boxes\n    };\n    return _this;\n  }\n\n  _createClass(Body, [{\n    key: \"handleaddbox\",\n    value: function handleaddbox() {\n      var newBoxes = this.state.boxes;\n      newBoxes.push({\n        index: newBoxes.length\n      });\n      this.setState({\n        boxes: newBoxes\n      });\n      console.log(\"handleaddbox \" + this.state.boxes.length);\n    }\n  }, {\n    key: \"handleremovebox\",\n    value: function handleremovebox() {\n      var newBoxes = this.state.boxes;\n      newBoxes.splice(newBoxes.length - 1, 1);\n      this.setState({\n        boxes: newBoxes\n      });\n      console.log(\"handleremovebox \" + this.state.boxes.length);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var boxes = this.state.boxes;\n      var boxnum = boxes.length;\n      var button;\n\n      if (boxnum === 1) {\n        button = React.createElement(\"div\", {\n          className: \"centeronebutton\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"circlebutton\",\n          onClick: this.handleaddbox,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, \"+\"));\n      } else {\n        button = React.createElement(\"div\", {\n          className: \"centeronebutton\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          className: \"circlebutton\",\n          onClick: this.handleremovebox,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, \"-\"), React.createElement(\"button\", {\n          className: \"circlebutton\",\n          onClick: this.handleaddbox,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, \"+\"));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"main-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sub-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sub-body1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, autosplitting, React.createElement(\"modal\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })), React.createElement(Tweets, {\n        boxes: boxes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), button, sendtweet));\n    }\n  }]);\n\n  return Body;\n}(React.Component);\n\nexport default Body;","map":{"version":3,"sources":["C:\\Users\\tlalka\\Documents\\TTDeploy\\tt-deploy\\src\\Body.js"],"names":["React","Component","Modal","autosplitting","sendtweet","splittingoptions","Tweets","boxes","map","box","index","charactersused","Body","props","handleaddbox","bind","handleremovebox","boxnum","push","state","newBoxes","length","setState","console","log","splice","button"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Modal from './Modal';\r\n\r\nconst autosplitting = <div className=\"b-1\">\r\n                        Auto splitting: off\r\n                    </div>;\r\n\r\nconst sendtweet = <div className=\"b-3\">\r\n                        <input type=\"submit2\" value=\"submit\"/></div>;\r\n\r\nconst splittingoptions = <div className=\"b-2\">\r\n                        <button type=\"button\" className=\"notbutton\" data-toggle=\"modal\" data-target=\"#exampleModal\">\r\n                            Splitting options\r\n                        </button>\r\n                    </div>;\r\n\r\nconst Tweets = ({boxes}) => (\r\n<div>\r\n    {\r\n        boxes.map( box =>(\r\n        <div key = {box.index}>\r\n    <textarea type=\"text2\" id=\"tweet\" name=\"tweet\">\r\n                    </textarea>\r\n                    <div className = \"sub-body2\">\r\n                        <div className=\"b-4\">\r\n                            Add picture\r\n                        </div>\r\n            {charactersused} \r\n                    </div>\r\n    </div>\r\n        ))\r\n    }\r\n    </div>\r\n)\r\n\r\nconst charactersused = <div className=\"b-5\">\r\n                            0/280 characters used\r\n                        </div>;\r\n\r\nclass Body extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleaddbox = this.handleaddbox.bind(this);\r\n        this.handleremovebox = this.handleremovebox.bind(this);\r\n        const boxnum = {index: 1};\r\n        const boxes = [];\r\n        boxes.push({boxnum});\r\n        this.state = {boxes};\r\n        \r\n        \r\n    }\r\n    handleaddbox(){\r\n        const newBoxes = this.state.boxes;\r\n        newBoxes.push({index: newBoxes.length});\r\n        this.setState({boxes : newBoxes});\r\n        console.log(\"handleaddbox \" + this.state.boxes.length);\r\n    }\r\n    handleremovebox(){\r\n        const newBoxes = this.state.boxes;\r\n        newBoxes.splice((newBoxes.length-1),1);\r\n        this.setState({boxes : newBoxes});\r\n        console.log(\"handleremovebox \" + this.state.boxes.length);\r\n    }\r\n    render() {\r\n        const boxes = this.state.boxes;\r\n        const boxnum = boxes.length;\r\n        let button;\r\n        if(boxnum === 1){\r\n            button = <div className = \"centeronebutton\">\r\n            <button className = \"circlebutton\" onClick = {this.handleaddbox}>\r\n                            +\r\n                        </button>\r\n            </div>\r\n        } else{\r\n            button = <div className = \"centeronebutton\">\r\n             <button className = \"circlebutton\" onClick = {this.handleremovebox}>\r\n                            -\r\n                        </button>\r\n            <button className = \"circlebutton\" onClick = {this.handleaddbox}>\r\n                            +\r\n                        </button>\r\n            </div>\r\n        }\r\n        return (\r\n            <div className = \"main-body\">\r\n            <div className = \"sub-body\">\r\n                <div className = \"sub-body1\">\r\n                    {autosplitting}\r\n                    <modal />\r\n                </div>\r\n<Tweets boxes={boxes}/>             \r\n            {button}\r\n                    {sendtweet}\r\n\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Body;"]},"metadata":{},"sourceType":"module"}